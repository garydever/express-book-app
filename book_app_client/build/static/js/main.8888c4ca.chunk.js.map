{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/ListedBook/ListedBook.js","Components/ReadingList/ReadingList.js","Components/Book/Book.js","Components/BookList/BookList.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","handleTermChange","bind","handleSearch","e","this","setState","target","value","preventDefault","onSearch","className","type","placeholder","onChange","onClick","React","Component","ListedBook","markAsRead","removeBook","id","src","img","alt","title","author","publisher","isRead","ReadingList","isLoaded","items","latestBook","fetch","then","response","json","result","bookList","prevState","componentDidMount","bookId","url","fetchOptions","method","headers","body","JSON","stringify","data","console","log","catch","error","length","map","item","key","is_read","Book","handleClick","onAdd","book","BookList","searchResults","volumeInfo","authors","imageLinks","thumbnail","App","totalItems","booklist","search","addToList","queryString","bookArray","jsonResponse","forEach","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6XAGaA,G,YAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,IAEV,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANL,EADvB,8EAUqBE,GACbC,KAAKC,SAAS,CAACN,KAAMI,EAAEG,OAAOC,QAC9BJ,EAAEK,mBAZV,qCAgBQJ,KAAKP,MAAMY,SAASL,KAAKN,MAAMC,QAhBvC,+BAoBQ,OACI,yBAAKW,UAAU,aAEX,wBAAIA,UAAU,eAAd,oBACA,2BACAA,UAAU,cACVC,KAAK,OACLC,YAAY,sCACZC,SAAUT,KAAKJ,mBACf,4BACAU,UAAU,eACVC,KAAK,SACLG,QAASV,KAAKF,cAHd,eA7BhB,GAA+Ba,IAAMC,YCAxBC,G,YAAb,YACI,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KACDqB,WAAa,EAAKA,WAAWjB,KAAhB,gBAClB,EAAKkB,WAAa,EAAKA,WAAWlB,KAAhB,gBAHH,EADvB,0EAQQG,KAAKP,MAAMqB,WAAWd,KAAKP,MAAMuB,MARzC,mCAYQhB,KAAKP,MAAMsB,WAAWf,KAAKP,MAAMuB,MAZzC,+BAgBQ,OACI,yBAAKV,UAAU,kBACX,yBAAKW,IAAKjB,KAAKP,MAAMyB,IAAKC,IAAKnB,KAAKP,MAAM2B,QAC1C,yBAAKd,UAAU,aAAaN,KAAKP,MAAM2B,OACvC,6BAAMpB,KAAKP,MAAM4B,QACjB,yBAAKf,UAAU,iBAAiBN,KAAKP,MAAM6B,WACpB,IAAtBtB,KAAKP,MAAM8B,QAAgB,qDACL,IAAtBvB,KAAKP,MAAM8B,QAAgB,kDACL,IAAtBvB,KAAKP,MAAM8B,QAAgB,4BAC5Bb,QAASV,KAAKc,YADc,qBAGL,IAAtBd,KAAKP,MAAM8B,QAAgB,4BAC5Bb,QAASV,KAAKe,YADc,oBA3B5C,GAAgCJ,IAAMC,YCEzBY,EAAb,YACI,WAAY/B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT+B,UAAU,EACVC,MAAO,GACPC,WAAY,MAEhB,EAAKb,WAAa,EAAKA,WAAWjB,KAAhB,gBAClB,EAAKkB,WAAa,EAAKA,WAAWlB,KAAhB,gBARH,EADvB,iFAYyB,IAAD,OAChB+B,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAK/B,SAAS,CACdwB,UAAU,EACVC,MAAOM,EAAOC,gBAlB9B,yCAsBuBC,GACXlC,KAAKP,MAAMkC,aAAeO,EAAUP,aACpC3B,KAAKC,SAAS,CAAC0B,WAAY3B,KAAKP,MAAMkC,aACtC3B,KAAKmC,uBAzBjB,iCA6BqBC,GA7BrB,iFA8BcC,EA9Bd,4CA8ByDD,GAC3CE,EAAe,CACrBC,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAC,KAAQ,CAC1B,QAAW,MArCvB,mBAuCcf,MAAMS,EAAKC,GAChBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAe,GACNC,QAAQC,IAAI,WAAYF,MAEvBG,OAAM,SAAAC,GACPH,QAAQG,MAAM,SAAUA,OA7ChC,OA+CQhD,KAAKmC,oBA/Cb,kFAkDqBC,GAlDrB,iFAmDcC,EAnDd,4CAmDyDD,GAC3CE,EAAe,CACnBC,OAAQ,UArDlB,mBAuDcX,MAAMS,EAAKC,IAvDzB,OAwDQtC,KAAKmC,oBAxDb,gFA2Dc,IAAD,OACL,OAAKnC,KAAKN,MAAM+B,SAGJ,yBAAKnB,UAAU,yBAClBN,KAAKN,MAAMgC,MAAMuB,OAAS,GAAM,gDACjC,yBAAK3C,UAAU,eACdN,KAAKN,MAAMgC,MAAMwB,KAAI,SAAAC,GAClB,OAAO,kBAAC,EAAD,CACPC,IAAKD,EAAKnC,GACVA,GAAImC,EAAKnC,GACTI,MAAO+B,EAAK/B,MACZC,OAAQ8B,EAAK9B,OACbC,UAAW6B,EAAK7B,UAChBJ,IAAKiC,EAAKjC,IACVK,OAAQ4B,EAAKE,QACbvC,WAAY,EAAKA,WACjBC,WAAY,EAAKA,kBAflB,2DA7DnB,GAAiCJ,IAAMC,WCF1B0C,G,MAAb,YACI,WAAY7D,GAAQ,IAAD,8BACf,4CAAMA,KAED8D,YAAc,EAAKA,YAAY1D,KAAjB,gBAHJ,EADvB,2EAQQG,KAAKP,MAAM+D,MAAMxD,KAAKP,MAAMgE,QARpC,+BAYQ,OACI,yBAAKnD,UAAU,kBACX,yBAAKW,IAAKjB,KAAKP,MAAMwB,IAAKE,IAAKnB,KAAKP,MAAM2B,QAC1C,yBAAKd,UAAU,aAAaN,KAAKP,MAAM2B,OACvC,yBAAKd,UAAU,cAAcN,KAAKP,MAAM4B,QACxC,yBAAKf,UAAU,iBAAiBN,KAAKP,MAAM6B,WAC3C,4BAAQZ,QAASV,KAAKuD,aAAtB,oBAlBhB,GAA0B5C,IAAMC,YCCnB8C,G,MAAb,iLACc,IAAD,OACL,OACI,yBAAKpD,UAAU,YAEPN,KAAKP,MAAMkE,cAAcT,KAAI,SAAAO,GAAI,OAC7B,kBAAC,EAAD,CACAA,KAAMA,EACNrC,MAAOqC,EAAKG,WAAWxC,MACvBC,OAAQoC,EAAKG,WAAWC,QAAQ,GAChC5C,IAAKwC,EAAKG,WAAWE,WAAWC,UAChCzC,UAAWmC,EAAKG,WAAWtC,UAC3BkC,MAAO,EAAK/D,MAAM+D,gBAZ1C,GAA8B7C,IAAMC,YCIvBoD,EAAb,YACE,WAAYvE,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXuE,WAAY,EACZC,SAAU,GACVvC,WAAY,MAEd,EAAKwC,OAAS,EAAKA,OAAOtE,KAAZ,gBACd,EAAKuE,UAAY,EAAKA,UAAUvE,KAAf,gBARA,EADrB,oEAYeF,GAZf,uFAaU0E,EAbV,wDAayE1E,EAbzE,kBAcQ2E,EAAY,GAdpB,mBAe2B1C,MAAMyC,IAfjC,cAeUvC,EAfV,0BAgB+BA,EAASC,QAhBxC,WAgBUwC,EAhBV,QAiBsB7C,MAjBtB,mDAoBUuC,EAAaM,EAAaN,WAChCM,EAAa7C,MAAM8C,SAAQ,SAAAf,GACrBA,EAAKG,WAAWxC,OAClBqC,EAAKG,WAAWC,SAChBJ,EAAKG,WAAWE,YAChBL,EAAKG,WAAWtC,WACdgD,EAAUG,KAAKhB,MAGnBzD,KAAKC,SAAS,CAACgE,WAAYA,EAAYC,SAAUI,IA7BvD,kFAkCkBb,GAlClB,kHAoCUnB,EAAe,CACnBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,KAAQ,CAC5B,MAASc,EAAKG,WAAWxC,MACzB,OAAUqC,EAAKG,WAAWC,QAAQ,GAClC,UAAaJ,EAAKG,WAAWtC,UAC7B,IAAOmC,EAAKG,WAAWE,WAAWC,cA7C1C,mBA+CUnC,MA/CV,oCA+CqBU,GAChBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAe,GACJC,QAAQC,IAAI,WAAYF,MAEzBG,OAAM,SAAAC,GACLH,QAAQG,MAAM,SAAUA,OArD9B,OAuDIhD,KAAKC,SAAS,CAAC0B,WAAY8B,IAvD/B,gFA+DI,OACE,yBAAKnD,UAAU,sBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAWD,SAAUL,KAAKmE,UAE5B,yBAAK7D,UAAU,0BACb,kBAAC,EAAD,CACAqB,WAAY3B,KAAKN,MAAMiC,eAG3B,yBAAKrB,UAAU,4BACb,kBAAC,EAAD,CACAqD,cAAe3D,KAAKN,MAAMwE,SAC1BV,MAAOxD,KAAKoE,kBA7EtB,GAAyBzD,IAAMC,WCIX8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.8888c4ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({term: e.target.value });\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleSearch() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"searchBar\">\r\n            \r\n                <h1 className=\"searchTitle\">Search for books</h1>\r\n                <input\r\n                className=\"searchInput\" \r\n                type=\"text\"\r\n                placeholder=\"Search by title, author, subject...\" \r\n                onChange={this.handleTermChange}/>\r\n                <button\r\n                className=\"searchButton\" \r\n                type=\"submit\"\r\n                onClick={this.handleSearch}>\r\n                    Search\r\n                </button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './ListedBook.css';\r\n\r\nexport class ListedBook extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.markAsRead = this.markAsRead.bind(this);\r\n        this.removeBook = this.removeBook.bind(this);\r\n    }\r\n\r\n    markAsRead() {\r\n        this.props.markAsRead(this.props.id);\r\n    }\r\n\r\n    removeBook() {\r\n        this.props.removeBook(this.props.id);\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div className=\"book-container\">\r\n                <img src={this.props.img} alt={this.props.title}/>\r\n                <div className=\"bookTitle\">{this.props.title}</div>\r\n                <div>{this.props.author}</div>\r\n                <div className=\"bookPublisher\">{this.props.publisher}</div>\r\n                {this.props.isRead === 1 && <div>I've read this book!</div>}\r\n                {this.props.isRead === 0 && <div>Have not read yet</div>}\r\n                {this.props.isRead === 0 && <button \r\n                onClick={this.markAsRead}>Finished Reading?\r\n                </button>}\r\n                {this.props.isRead === 1 && <button \r\n                onClick={this.removeBook}>Remove book\r\n                </button>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './ReadingList.css';\r\nimport { ListedBook } from '../ListedBook/ListedBook';\r\n \r\n\r\nexport class ReadingList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            items: [],\r\n            latestBook: null\r\n        };\r\n        this.markAsRead = this.markAsRead.bind(this);\r\n        this.removeBook = this.removeBook.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`http://localhost:4000/readingList`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({\r\n                isLoaded: true,\r\n                items: result.bookList\r\n                })}) \r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.props.latestBook !== prevState.latestBook) {\r\n            this.setState({latestBook: this.props.latestBook});\r\n            this.componentDidMount();\r\n        }\r\n    }\r\n \r\n    async markAsRead(bookId) {\r\n        const url = `http://localhost:4000/readingList/${bookId}`;\r\n        const fetchOptions = {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\"book\": {\r\n            \"is_read\": 1}})\r\n            }\r\n        await fetch(url, fetchOptions)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n        console.log('Success:', data);\r\n        })\r\n        .catch(error => {\r\n        console.error('Error:', error);\r\n        });\r\n        this.componentDidMount(); \r\n        }\r\n\r\n    async removeBook(bookId) {\r\n        const url = `http://localhost:4000/readingList/${bookId}`;\r\n        const fetchOptions = {\r\n          method: 'DELETE'\r\n        }\r\n        await fetch(url, fetchOptions);\r\n        this.componentDidMount()\r\n    }\r\n\r\n    render() { \r\n        if (!this.state.isLoaded) {\r\n            return <div>Loading readinglist...</div>;\r\n        } else {\r\n            return (<div className=\"readingList-container\">\r\n                {this.state.items.length > 0  && <h1>My reading list:</h1>}\r\n                <div className=\"readingList\">\r\n                {this.state.items.map(item => {\r\n                    return <ListedBook \r\n                    key={item.id}\r\n                    id={item.id}\r\n                    title={item.title} \r\n                    author={item.author}\r\n                    publisher={item.publisher}\r\n                    img={item.img} \r\n                    isRead={item.is_read}\r\n                    markAsRead={this.markAsRead}\r\n                    removeBook={this.removeBook}\r\n                    />    \r\n                })}\r\n                </div>\r\n                \r\n            </div>);\r\n        }\r\n    }\r\n                  \r\n    }\r\n","import React from 'react';\r\nimport './Book.css';\r\n\r\nexport class Book extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick() {\r\n        this.props.onAdd(this.props.book);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='book-container'>\r\n                <img src={this.props.src} alt={this.props.title}/>\r\n                <div className=\"bookTitle\">{this.props.title}</div> \r\n                <div className=\"bookAuthor\">{this.props.author}</div>\r\n                <div className=\"bookPublisher\">{this.props.publisher}</div>\r\n                <button onClick={this.handleClick}>Add to list</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Book } from '../Book/Book';\r\nimport './BookList.css'\r\n\r\nexport class BookList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"booklist\">\r\n                {\r\n                    this.props.searchResults.map(book => \r\n                        <Book\r\n                        book={book} \r\n                        title={book.volumeInfo.title}\r\n                        author={book.volumeInfo.authors[0]}\r\n                        src={book.volumeInfo.imageLinks.thumbnail}\r\n                        publisher={book.volumeInfo.publisher} \r\n                        onAdd={this.props.onAdd}\r\n                        />\r\n                    )\r\n                }\r\n   \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { ReadingList } from '../ReadingList/ReadingList';\nimport { BookList } from '../BookList/BookList';\n\n\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalItems: 0,\n      booklist: [],\n      latestBook: null\n    }\n    this.search = this.search.bind(this);\n    this.addToList = this.addToList.bind(this);\n      }\n\n  async search(term) {\n    const queryString = `https://www.googleapis.com/books/v1/volumes?q=${term}&maxResults=40`;\n    let bookArray = [];\n    const response = await fetch(queryString);\n    const jsonResponse = await response.json();\n    if (!jsonResponse.items) {\n      return;\n    }\n    const totalItems = jsonResponse.totalItems;\n    jsonResponse.items.forEach(book => {\n      if (book.volumeInfo.title && \n        book.volumeInfo.authors &&\n        book.volumeInfo.imageLinks &&\n        book.volumeInfo.publisher) {\n          bookArray.push(book);\n        }\n      });\n      this.setState({totalItems: totalItems, booklist: bookArray})\n  }\n\n\n  \n  async addToList(book) {\n    const url = `http://localhost:4000/readingList`;\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\"book\": {\n        \"title\": book.volumeInfo.title,\n        \"author\": book.volumeInfo.authors[0],\n        \"publisher\": book.volumeInfo.publisher,\n        \"img\": book.volumeInfo.imageLinks.thumbnail}})\n        }\n    await fetch(url, fetchOptions)\n    .then(response => response.json())\n    .then(data => {\n      console.log('Success:', data)\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n    this.setState({latestBook: book});\n    }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"app-main-container\">\n        <div className=\"vertical\">\n          <div className=\"search-bar-component\">\n            <SearchBar onSearch={this.search} />\n          </div>\n          <div className=\"reading-list-component\">\n            <ReadingList \n            latestBook={this.state.latestBook}/>\n          </div>\n        </div>\n        <div className=\"search-results-component\">\n          <BookList \n          searchResults={this.state.booklist}\n          onAdd={this.addToList}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}